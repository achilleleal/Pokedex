{"version":3,"sources":["Components/Header.js","Components/PokeCard.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Header","getRandPokemonNumber","className","style","backgroundColor","color","src","width","id","onClick","borderColor","PokeCard","this","props","data","name","types","sprites","undefined","background","primaryType","type","secondaryType","alt","front_default","textTransform","typeColor","defColor","textDecoration","href","Component","App","a","fetch","Math","round","random","toString","resp","json","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e71e72b6.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\n\nconst Header = ({getRandPokemonNumber}) => {\n\n  return (\n    <header>\n        <div className='pa2' style={{backgroundColor: '#FF404A' }}>\n            <h1 className='f1' style={{color: 'white'}}>Randomdex</h1>\n            <img src='http://pngimg.com/uploads/pokeball/pokeball_PNG24.png' width='100'/>\n        </div>\n        <div id='button-div' className='pa3' style={{backgroundColor: '#FF6B72'}}>\n            <button className='br3 pa2' onClick={getRandPokemonNumber} style={{borderColor: '#FF6B72'}}>Get a random Pokémon!</button>\n        </div>\n    </header>\n  );\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport 'tachyons';\n\nclass PokeCard extends Component {\n    //Checks if pokemon = 0. Since 0 is false, not 0 is true, hence !0. \n    render() {\n        // const pokeNumber = this.props.pokeNumber;\n        const {name, id, types, sprites} = this.props.data;\n        if (id == '' || id == undefined) {\n            return(\n            <div style={{background: '#434343'}} className='pa4'>\n                <h1 className='f1' style={{color: 'white'}}>Search for a Pokémon!</h1>\n            </div>\n            )\n        } else {  \n\n            const primaryType = types[0].type.name;\n            let secondaryType = '';\n\n            try {\n                secondaryType = ' / ' + types[1].type.name;\n            } catch {\n            }\n            \n            const defColor = () => {\n                let typeColor = 'black';\n                switch (primaryType) {\n                        case 'fire':\n                            typeColor = '#CD0702'\n                            break;\n                        case 'water':\n                            typeColor = '#2719DC'\n                            break;\n                        case 'grass':\n                            typeColor = '#045D0A'\n                            break;\n                        case 'steel':\n                            typeColor = '#586167'\n                            break;\n                        case 'electric':\n                            typeColor = '#BDA200'\n                            break;\n                        case 'normal':\n                            typeColor = '#D4AA7D'\n                            break;\n                        case 'poison':\n                            typeColor = '#740284'\n                            break;\n                        case 'fighting':\n                            typeColor = '#D85A00'\n                            break;\n                        case 'ice':\n                            typeColor = '#0FA6A6'\n                            break;\n                        case 'ground':\n                            typeColor = '#7C592B'\n                            break;\n                        case 'rock':\n                            typeColor = '#4B2C09'\n                            break;\n                        case 'flying':\n                            typeColor = '#7FE4E4'\n                            break;\n                        case 'fairy':\n                            typeColor = '#F086C9'\n                            break;\n                        case 'ghost':\n                            typeColor = '#3A0B52'\n                            break;\n                        case 'dragon':\n                            typeColor = '#4F00E1'\n                            break;\n                        case 'bug':\n                            typeColor = '#77CE00'\n                            break;\n                        case 'psychic':\n                            typeColor = '#AA0077'\n                            break;\n                        case 'dark':\n                            typeColor = '#373737'\n                            break;\n                    default:\n                        break;\n                }\n                return typeColor\n            }\n\n            return(\n                <div style={{background: '#434343'}} className='pa4'>\n                    <h1 className='f1' style={{color: 'white'}}> {`Nº ${id}`} </h1>\n                    <div className='tc bg-lightest-blue dib br3 pa3 ma2 grow b--solid bw2 shadow-5 b--blue'>\n                        <div className='bg-white dib br-100 pa3 ma2 bw2'> \n                            <img alt={id} src={sprites.front_default}/>\n                        </div>\n                        <div className='bg-white pa3 br3' style={{textTransform: \"capitalize\"}}>\n                            <h1 className='f1' style={{color: defColor()}}>{name}</h1>\n                            {/* <h2> Primary type: {primaryType}</h2>\n                            <h2> Secondary type: {secondaryType}</h2> */}\n                            <h2>{primaryType}{secondaryType}</h2>\n                            <h3><a style={{textDecoration: \"none\"}} href={`https://bulbapedia.bulbagarden.net/wiki/${name}_(Pok%C3%A9mon)`}>Read more in Bulbapedia</a> </h3>\n                        </div>\n                    </div>\n                </div>\n            );\n\n        }\n    }\n}\n\nexport default PokeCard;\n","import React, { Component } from 'react';\nimport Header from '../Components/Header';\nimport PokeCard from '../Components/PokeCard';\nimport './App.css';\nimport 'tachyons';\n\n\nclass App extends Component {\n\n  // Creates pokemonNumber number value\n  constructor() {\n\t\tsuper()\n\t\tthis.state = {\n      data: {}\n\t\t}\n  }\n\n  // Changes the pokemonNumber value to a random value\n  getRandPokemonNumber = async () => {\n    const resp = await fetch(`https://pokeapi.co/api/v2/pokemon/${Math.round(Math.random() * 807).toString()}`);\n    this.setState({data: await resp.json()}) \n  }\n\n  render() {  \n    // const {pokemonNumber} = this.state; //Extracts pokemonNumber from the state\n    const {data} = this.state;\n    return (\n      <div className='App'>\n        {/*Here, we pass the function and the pokemonNumber value as props to each component*/}\n        <Header getRandPokemonNumber={this.getRandPokemonNumber}/>\n        <PokeCard  data={data}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n//`https://pokeapi.co/api/v2/pokemon/?limit=151`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}