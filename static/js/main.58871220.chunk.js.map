{"version":3,"sources":["Components/Header.js","Components/PokeCard.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Header","getRandPokemonNumber","className","style","backgroundColor","color","src","alt","width","id","onClick","borderColor","PokeCard","this","props","data","name","types","sprites","undefined","background","primaryType","type","secondaryType","front_default","textTransform","typeColor","defColor","textDecoration","href","Component","App","a","fetch","Math","round","random","toString","resp","json","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58871220.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\n\nconst Header = ({getRandPokemonNumber}) => {\n\n  return (\n    <header>\n        <div className='pa2' style={{backgroundColor: '#FF404A' }}>\n            <h1 className='f1' style={{color: 'white'}}>Randomdex</h1>\n            <img src='http://pngimg.com/uploads/pokeball/pokeball_PNG24.png' alt='Pokeball' width='100'/>\n        </div>\n        <div id='button-div' className='pa3' style={{backgroundColor: '#FF6B72'}}>\n            <button className='br3 pa2' onClick={getRandPokemonNumber} style={{borderColor: '#FF6B72'}}>Get a random Pokémon!</button>\n        </div>\n    </header>\n  );\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport 'tachyons';\n\nconst pokecardBG = '#434343'; //As a variable to be able to change both of the outcome's bg color\nclass PokeCard extends Component {\n    \n    render() {\n        // Destructures the needed properties from the data, which is a json file.\n        const {name, id, types, sprites} = this.props.data;\n\n        //If there is no id or it's undefined, which is the case before the button gets clicked, loads the following:\n        if (id === '' || id === undefined) {\n            return(\n                <div style={{background: pokecardBG}} className='pa4'>\n                    <h1 className='f1' style={{color: 'white'}}>Search for a Pokémon!</h1>\n                </div>\n            )\n        \n        } else {   \n            // Once there is an id, loads the pokemon card.\n            const primaryType = types[0].type.name;\n            let secondaryType = '';\n\n            try { \n                // If the pokemon has a secondary type, it will be reassigned to its variable to be displayed.\n                secondaryType = ' / ' + types[1].type.name;\n            } catch {\n                // Otherwise, since no other type is found, it will throw an error. The catch block prevents the breaking. \n            }\n            \n            \n            const defColor = () => {\n                // Returns a color depending on the global primaryType value. Could be outside as a regular procedure, but as a function it could be tweaked to work with any passed param.\n                let typeColor = 'black';\n                switch (primaryType) {\n                        case 'fire':\n                            typeColor = '#CD0702';\n                            break;\n                        case 'water':\n                            typeColor = '#2719DC';\n                            break;\n                        case 'grass':\n                            typeColor = '#045D0A';\n                            break;\n                        case 'steel':\n                            typeColor = '#586167';\n                            break;\n                        case 'electric':\n                            typeColor = '#BDA200';\n                            break;\n                        case 'normal':\n                            typeColor = '#D4AA7D';\n                            break;\n                        case 'poison':\n                            typeColor = '#740284';\n                            break;\n                        case 'fighting':\n                            typeColor = '#D85A00';\n                            break;\n                        case 'ice':\n                            typeColor = '#0FA6A6';\n                            break;\n                        case 'ground':\n                            typeColor = '#7C592B';\n                            break;\n                        case 'rock':\n                            typeColor = '#4B2C09';\n                            break;\n                        case 'flying':\n                            typeColor = '#7FE4E4';\n                            break;\n                        case 'fairy':\n                            typeColor = '#F086C9';\n                            break;\n                        case 'ghost':\n                            typeColor = '#3A0B52';\n                            break;\n                        case 'dragon':\n                            typeColor = '#4F00E1';\n                            break;\n                        case 'bug':\n                            typeColor = '#77CE00';\n                            break;\n                        case 'psychic':\n                            typeColor = '#AA0077';\n                            break;\n                        case 'dark':\n                            typeColor = '#373737';\n                            break;\n                    default:\n                        break;\n                }\n                return typeColor;\n            }\n\n            return(\n                <div style={{background: pokecardBG}} className='pa4'>\n                    <h1 className='f1' style={{color: 'white'}}> {`Nº ${id}`} </h1>\n                    <div className='bg-lightest-blue dib br3 pa3 ma2 grow b--solid b--blue bw2 shadow-5'>\n                        <img alt={name} src={sprites.front_default} className='bg-white dib br-100 pa3 ma2 b--solid b--blue bw2'/>\n                        <div className='bg-white pa3 br3 b--solid b--blue bw2' style={{textTransform: \"capitalize\"}}>\n                            <h1 className='f1' style={{color: defColor()}}>{name}</h1>\n                            <h2>{primaryType}{secondaryType}</h2>\n                            <h3><a style={{textDecoration: \"none\"}} href={`https://bulbapedia.bulbagarden.net/wiki/${name}_(Pok%C3%A9mon)`}>Read more in Bulbapedia</a></h3>\n                        </div>\n                    </div>\n                </div>\n            );\n\n        }\n    }\n}\n\nexport default PokeCard;\n","import React, { Component } from 'react';\nimport Header from '../Components/Header';\nimport PokeCard from '../Components/PokeCard';\nimport './App.css';\nimport 'tachyons';\n\n\nclass App extends Component {\n\n  constructor() {\n\t\tsuper()\n\t\tthis.state = {\n      data: {} // Creates a data object to store the pokemon info\n\t\t}\n  }\n  \n  getRandPokemonNumber = async () => {\n    // Fetches the data of a random pokemon within the range (807 is the total pokemon up to gen 7), then adds it to the state's data object\n    const resp = await fetch(`https://pokeapi.co/api/v2/pokemon/${Math.round(Math.random() * 807).toString()}`);\n    this.setState({data: await resp.json()}) \n  }\n\n  render() {  \n    const {data} = this.state; // Extracts the data from the state\n    return (\n      <div className='App'>\n        {/* Passes the function and the data to each component as props*/}\n        <Header getRandPokemonNumber={this.getRandPokemonNumber}/>\n        <PokeCard data={data}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n//`https://pokeapi.co/api/v2/pokemon/?limit=151`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}